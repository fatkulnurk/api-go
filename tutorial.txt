bab 2 adalah tutorial untuk membuat file configurasi menggunakan viper.
- copy folder 01-simple, paste dengan nama 02-config-file
- buat folder config yang berisi 2 file, yaitu file config.json dan config.go
- file config.json berisi konfigurasi dari aplikasi kita dalam bentuk json
{
    "server": {
        "address": ":9090"
    }
}

- file config.go berisi kode menggunakan viper untuk membaca file config.json
package config

import (
	"github.com/spf13/viper"
	"fmt"
)

func init() {
	viper.SetConfigFile("./config/config.json")
	err := viper.ReadInConfig()
	if err != nil {
		fmt.Println(err.Error())
		panic(err.Error())
	}
}

func GetString(key string)(string) {
	return viper.GetString(key)
}

func GetInt(key string)(int) {
	return viper.GetInt(key)
}

pada file main.go tambahkan import : "github.com/jacky-htg/api-go/02-config-file/config"
dan pada func main(), ubah baris http.ListenAndServe menjadi : http.ListenAndServe(config.GetString("server.address"), router)
----------------------------------------------------------------
pada bab 3 kita akan membuat struktur aplikasi sesuai konsep MVC
- copy folder 02-config dan paste dengan nama 03-mvc
- pastikan semua import yang mengarah ke 02-config diubah ke 03-mvc
- buat folder controllers, models, repositories, dan libraries
- pindahkan semua func struct dan var ke file controllers/userController.go, sehingga fi file main.go hanya ada func main() beserta import yang dibutuhkan.
- jangan lupa tambahkan import 03-mvc/controllers di file main.go
sehingga isi dari file main.go jadi seperti ini:
package main

import (
	"github.com/gorilla/mux"
	"net/http"
	"github.com/jacky-htg/api-go/02-config-file/config"
	"github.com/jacky-htg/api-go/03-mvc/controllers"
)

func main() {
	router := mux.NewRouter()

	router.HandleFunc("/api/users", controllers.GetUsersEndPoint).Methods("GET")
	router.HandleFunc("/api/users", controllers.CreateUserEndPoint).Methods("POST")
	router.HandleFunc("/api/users/{id}", controllers.GetUserEndPoint).Methods("GET")

	http.ListenAndServe(config.GetString("server.address"), router)
}

- dari file controllers/userController.go pindahkan type User ke file models/user.go
package models

import "time"

type User struct {
	ID	        int64
	Name        string
	Email       string
	CreatedAt   time.Time
	UpdateAt    time.Time
	DeletedAt   time.Time
}

- import models, dan ubah semua baris User menjadi models.user
- pindahkan semua operasi data ke file repositories/userRepository.go
package repositories

import (
	"time"
	"github.com/jacky-htg/api-go/03-mvc/models"
)

var users []models.User

func GetUsers()([]models.User) {
	return users
}

func CreateUser(user models.User)(models.User) {
	user.ID         = int64(len(users)+1)
	user.CreatedAt  = time.Now()

	users = append(users, user)
	return user
}

func GetUser(id int64)(models.User) {
	for _, v := range users {
		if v.ID == id {
			return v
		}
	}

	return models.User{}
}

- panggil fungsi2 di userRepository.go di controllers/userCOntroller.go
package controllers

import (
	"encoding/json"
	"net/http"
	"strconv"
	"github.com/gorilla/mux"
	"github.com/jacky-htg/api-go/03-mvc/models"
	"github.com/jacky-htg/api-go/03-mvc/repositories"
)

func GetUsersEndPoint(w http.ResponseWriter, _ *http.Request) {
	json.NewEncoder(w).Encode(repositories.GetUsers())
}

func CreateUserEndPoint(w http.ResponseWriter, req *http.Request) {
	var user models.User

	user.Name   = req.FormValue("name")
	user.Email  = req.FormValue("email")

	// Validation
	if len(user.Name) == 0 {
		json.NewEncoder(w).Encode("Please suplay valid name")
		return
	}

	if len(user.Email) == 0 {
		json.NewEncoder(w).Encode("Please suplay valid email")
		return
	}

	json.NewEncoder(w).Encode(repositories.CreateUser(user))
}

func GetUserEndPoint(w http.ResponseWriter, req *http.Request) {
	params := mux.Vars(req)
	id, _  := strconv.ParseInt(params["id"], 10, 64)

	json.NewEncoder(w).Encode(repositories.GetUser(id))
}

- terakhir kita kan memindahkan handling error ke dalam file libraries/generic.go
buat file libraries/generic.go yang berisi :
package libraries

import "fmt"

func CheckError(err error){
	if err != nil {
		fmt.Println(err.Error())
		panic(err.Error())
	}
}
- buka file config/config.go dan ubah handling error dg memanggil fungsi CheckError()
package config

import (
	"github.com/spf13/viper"
	"github.com/jacky-htg/api-go/03-mvc/libraries"
)

func init() {
	viper.SetConfigFile("./config/config.json")
	err := viper.ReadInConfig()
	libraries.CheckError(err)
}

func GetString(key string)(string) {
	return viper.GetString(key)
}

func GetInt(key string)(int) {
	return viper.GetInt(key)
}
---------------------------------------------------------------------------------------
Pada bab 4 kita akan melakukan operasi database menggunakan mysql.
- copy folder 03-mvc dan paste dengan nama 04-mysql-db
- pastikan semua import yang mengarah ke 03-mvc diubah ke 04-mysql-db
- di file config/config.json tambahakan konfigurasi untuk database
{
    "server": {
        "address": ":9090"
    },
    "database": {
        "driverName": "mysql",
        "dataSourceName": "root:rebel@/api_go"
    }
}
root adalah user, rebel adalah password, dan api_go adalah nama database.
buatlah database dengan nama api_go, dan table users dengan struktur berikut :

CREATE TABLE `users` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(45) NOT NULL,
  `email` varchar(128) NOT NULL,
  `password` varchar(120) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `email_UNIQUE` (`email`);

ALTER TABLE `users_bak`
    MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

- pada file models/user.go tambahakan field password
- pada file controllers/userController.go fungsi CreateUser tambahkan validasi password
if len(user.Password) == 0 {
		json.NewEncoder(w).Encode("Please suplay valid password")
		return
	}


- buat file repositories/repository.go
package repositories

import (
	"database/sql"
	"github.com/jacky-htg/api-go/04-mysql-db/config"
	"github.com/jacky-htg/api-go/04-mysql-db/libraries"
)

var db *sql.DB
var err error

func init() {
	// Create an sql.DB and check for errors
	db, err = sql.Open(config.GetString("database.driverName"), config.GetString("database.dataSourceName"))
	libraries.CheckError(err)

	// Test the connection to the database
	err = db.Ping()
	libraries.CheckError(err)
}


- pada file repositories/userRepository.go tambahkan import:
    _ "github.com/go-sql-driver/mysql"
	"github.com/jacky-htg/api-go/04-mysql-db/libraries"
    "github.com/jacky-htg/api-go/04-mysql-db/models"

- hapus kode var users []User karena kita tidak lagi menyimpan data users dalam memory.

- kemudian ubah kode sebelumnya menjadi seperti berikut :
func GetUsers() ([]models.User) {
	rows, err := db.Query("SELECT id, name, email, password FROM users")

	libraries.CheckError(err)

	var users []models.User

	for rows.Next() {
		var id int64
		var name string
		var email string
		var password string
		err = rows.Scan(&id, &name, &email, &password)
		libraries.CheckError(err)
		users = append(users, models.User{ID:id, Name:name, Email:email})
	}

	return users
}

func CreateUser(user models.User) (models.User)  {
	stmt, err := db.Prepare("INSERT INTO users (name, email, password, created_at) VALUES (?, ?, ?, NOW())")
	libraries.CheckError(err)

	res, err := stmt.Exec(user.Name, user.Email, user.Password)
	libraries.CheckError(err)

	id, err := res.LastInsertId()
	libraries.CheckError(err)

	user.ID = id

	return user
}

func GetUser(paramId int64) (models.User)  {
	rows, err := db.Query("SELECT id, name, email, password FROM users WHERE id=?", paramId)
	libraries.CheckError(err)
	defer rows.Close()

	var id int64
	var name string
	var email string
	var password string

	for rows.Next() {
		err := rows.Scan(&id, &name, &email, &password)
		libraries.CheckError(err)
	}

	err = rows.Err()
	libraries.CheckError(err)

	return models.User{ID:id, Name:name, Email:email}
}

- karena ada penambahana field password pada entity user, maka file controllers/userController.go juga mengalamai perubahan menjadi seperti berikut:
package controllers

import (
	"encoding/json"
	"net/http"
	"strconv"
	"github.com/gorilla/mux"
	"github.com/jacky-htg/api-go/04-mysql-db/models"
	"github.com/jacky-htg/api-go/04-mysql-db/repositories"
	"golang.org/x/crypto/bcrypt"
)

func GetUsersEndPoint(w http.ResponseWriter, _ *http.Request) {
	json.NewEncoder(w).Encode(repositories.GetUsers())
}

func CreateUserEndPoint(w http.ResponseWriter, req *http.Request) {
	var user models.User

	user.Name   = req.FormValue("name")
	user.Email  = req.FormValue("email")
	password   := req.FormValue("password")

	// Validation
	if len(user.Name) == 0 {
		json.NewEncoder(w).Encode("Please suplay valid name")
		return
	}

	if len(user.Email) == 0 {
		json.NewEncoder(w).Encode("Please suplay valid email")
		return
	}

	if len(password) == 0 {
		json.NewEncoder(w).Encode("Please suplay valid password")
		return
	}

	user.Password, _ = bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	json.NewEncoder(w).Encode(repositories.CreateUser(user))
}

func GetUserEndPoint(w http.ResponseWriter, req *http.Request) {
	params := mux.Vars(req)
	id, _  := strconv.ParseInt(params["id"], 10, 64)

	json.NewEncoder(w).Encode(repositories.GetUser(id))
}
---------------------------------------------------------------------------
pada bab 5 kita akan mempelajari tentang auth token menggunakan jwt-token
- copy folder 04-mysql-db dan paste dengan nama 05-token
- pastikan semua import yang mengarah ke 04-mysql-db diubah ke 05-token
- pada func main() kita tambhakan routing untuk handling token
router.HandleFunc("/api/get-token",  controllers.GetTokenHandler).Methods("POST")
- buat method baru di userRepository :
func GetPwdByEmail(inputEmail string)(string, error){
	rows, err := db.Query("SELECT password FROM users WHERE email=?", inputEmail)
	libraries.CheckError(err)

	defer rows.Close()

	var databasePassword string

	for rows.Next() {
		err := rows.Scan(&databasePassword)
		libraries.CheckError(err)
	}

	err = rows.Err()
	libraries.CheckError(err)

	return databasePassword, err
}
- buat middleware untuk handle token. buat file libraries/token.go yang berisi
package libraries

import (
	"github.com/dgrijalva/jwt-go"
	"time"
)

type MyCustomClaims struct {
	Username string `json:"username"`
	jwt.StandardClaims
}

var mySigningKey = []byte("secret-rahasia")

func ValidateToken(myToken string) (bool, string) {
	token, err := jwt.ParseWithClaims(myToken, &MyCustomClaims{}, func(token *jwt.Token) (interface{}, error) {
		return []byte(mySigningKey), nil
	})

	if err != nil {
		return false, ""
	}

	claims := token.Claims.(*MyCustomClaims)
	return token.Valid, claims.Username
}

func ClaimToken(username string) (string, error){
	claims := MyCustomClaims{
		username,
		jwt.StandardClaims{
			ExpiresAt: time.Now().Add(time.Hour * 5).Unix(),
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

	// Sign the token with our secret
	return token.SignedString(mySigningKey)
}

fungsi ClaimToken digunakan untuk mendapatkan token, fungsi ValidateToken digunakan untuk memvalidasi token
- buat controller baru, controllers/authController.go untuk menghandle token
- pada setiap handle function di controller, sisipkan kode validasi token di bagian atas

    if (len(req.Header["Token"]) == 0) {
    		json.NewEncoder(w).Encode("Please suplay valid token")
    		return
    	}

    	isTokenValid, _ := libraries.ValidateToken(req.Header["Token"][0])

    	if !isTokenValid {
    		json.NewEncoder(w).Encode("token tidak valid")
    		return
    	}